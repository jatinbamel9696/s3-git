name: "Complete ami copy"

on:
  workflow_dispatch: 
  push:
    branches:
      - main 


jobs:
  deploy:
    name: "AMI copy to cn"
    runs-on: ubuntu-latest
    env:	
      AWS_ACCESS_KEY_ID: ${{  secrets.AWS_ACCESS_KEY_ID  }}
      AWS_SECRET_ACCESS_KEY: ${{  secrets.AWS_SECRET_ACCESS_KEY  }}
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID1: ${{  secrets.AWS_ACCESS_KEY_ID1  }}
      AWS_SECRET_ACCESS_KEY1: ${{  secrets.AWS_SECRET_ACCESS_KEY1  }}
      SOURCE_STAGING_BUCKET: "test-ami-jatin"
      DESTINATION_STAGING_BUCKET: "source-bucket-test-jatin"
      DESTINATION_REGION: "us-east-1"
      AWS_DEFAULT_REGION: "us-east-1"
      
      
    steps:

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1' 
      
      - name: fetch latest ami id with tag value
        continue-on-error: true
        run: |
          echo "fetching ami id"
          aws ec2 describe-images --region $AWS_DEFAULT_REGION --filters 'Name=tag:Name,Values=test*'  --query "sort_by(Images, &CreationDate)[-1].ImageId" --output text >ami_id
          amiID=$(cat 'ami_id')
          echo $amiID
          echo "amiID=$amiID" >> $GITHUB_ENV  

          echo "Describe image $amiID"  
          image_data=$(aws ec2 describe-images --region $AWS_DEFAULT_REGION --image-ids $amiID)
          echo $image_data
          image_name=$(jq -r '.Images[0].Name' <<< "${image_data}")
          echo $image_name
          image_description=$(jq -r '.Images[0].Description' <<< "${image_data}")
          echo $image_description
          echo "image_name=$image_name" >> $GITHUB_ENV
          echo "image_description=$image_description" >> $GITHUB_ENV

      - name: ec2 create-store-image-task
        continue-on-error: true
        run: |
          echo "Installing jq..."
          sudo apt-get install -y jq
          echo "Backup $amiID to s3"
          backup_ami_task_output=$(aws ec2 create-store-image-task --image-id $amiID --bucket $SOURCE_STAGING_BUCKET)
          backup_object=$(echo $backup_ami_task_output|jq -r '.ObjectKey')
          #backup_object1=$(jq -r '.ObjectKey' <<< "${backup_ami_task_output}")
          echo $backup_ami_task_output
          echo $backup_object
          echo "backup_object=$backup_object" >>$GITHUB_ENV
          sleep 30
          wait_time=30
          check_count=1
          while [ $check_count -le 5 ]
          do
            backup_ready=$(aws s3api head-object --bucket $SOURCE_STAGING_BUCKET --key $backup_object || true)
            if [ -z "$backup_ready" ]; then
              echo "Backup not complete, wait for $wait_time seconds"
              wait_time=$(( $wait_time * $check_count ))
              sleep $wait_time
              check_count=$(( $check_count + 1 ))
            else
              break
              echo "AMI backed up to objec s3://$SOURCE_STAGING_BUCKET/$backup_object"
            fi
          done

      - name: Download AMI backup object to workspace
        continue-on-error: true
        run: |
          #aws s3 cp s3://$SOURCE_STAGING_BUCKET/$backup_object ${{ github.workspace }} --region $AWS_DEFAULT_REGION --no-progress
          echo "Delete AMI backup file from S3."
          #aws s3 rm s3://$SOURCE_STAGING_BUCKET/$amiID

      - name: Configure AWS credentials from Test account2
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID1 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY1 }}
          aws-region: 'us-east-1'

      - name: Upload AMI backup file to the staging bucket.
        continue-on-error: true
        run: |  
          echo "Upload AMI backup file to the staging bucket"    
          #aws s3 cp ${{ github.workspace }}/$backup_object s3://$DESTINATION_STAGING_BUCKET/ --sse --no-progress
          
      - name: restore image task to another account
        run : |
          echo "Create restore ami task"
          restore_ami_task_output=$(aws ec2 create-restore-image-task --object-key $backup_object --bucket $DESTINATION_STAGING_BUCKET --name "Temporary copy of $backup_object")
          echo $restore_ami_task_output
          cn_temp_image_id=$(jq -r '.ImageId' <<< "${restore_ami_task_output}")
          cn_temp_id=$(echo $restore_ami_task_output|jq -r '.ImageId')
          echo $cn_temp_image_id
          echo "Wait for the temporary image to become available."
          wait_time=200
          sleep $wait_time
          check_count=1
          temp_ami_ready=false
          while [ $check_count -le 10 ]
          do
            echo "Describe image restore task"
            temp_ami_detail=$(aws ec2 describe-images --region $DESTINATION_REGION --image-ids $cn_temp_image_id)
            temp_ami_state1=$(echo $temp_ami_detail|jq -r '.Images[0].State')
            echo $temp_ami_state1
            temp_ami_state=$(jq -r '.Images[0].State' <<< "${temp_ami_detail}")
            echo "temp_ami_state= $temp_ami_state"
            if [ "$temp_ami_state" == "pending" ]; then
                echo "AMI creation pending, wait for $wait_time seconds..."
                sleep $wait_time
                check_count=$(( $check_count + 1 ))
            elif [ "$temp_ami_state" == "available" ]; then
                temp_ami_ready=true
                break
            else
                echo "AMI creation state: $temp_ami_state."
                exit 0
            fi
          done



          if [ "temporary_ami _ready" = true ]; then
            echo "Temporary unencrypted AMI created: $cn_temporary_image_id." 
            echo "Copy the temporary AMI and encrypt it."
            copy_image_output=$(aws ec2 copy-image --region $DESTINATION_REGION \
              --name "$image_name" --source-region $DESTINATION REGION \
              --source-image-id $cn_temporary_image_id --description "$image_description"\
              --encrypted --kms-key-id alias/jatin-kms --copy-image-tags)
            encrypted_cn_ami_id=$(jq -r '.ImageID' <<< "${copy_image_output}")

          echo "Wait for the encrypted image to become avaialable."
          check_count=1
          encrypted_cn_ami_ready=false
          while [ $check_count -le 10 ]
          do 
           encrypted_cn_ami_detail=$(aws ec2 describe-images --region $DESTINATION_REGION --image-ids $encrypted_cn_ami_id)
           encrypted_cn_ami_state=$(jq -r '.Images[0].State' <<< "${encrypted_cn_ami_detail}")

           if [ "$encrypted_cn_ami_state" == "pending" ]; then
                echo "Encrypted AMI creation pending, wait for $wait_time seconds..."
                sleep $wait_time
                check_count=$(( $check_count + 1 ))
            elif [ "$encrypted_cn_ami_state" == "available" ]; then
                encrypted_cn_ami_ready=true
                break
            else
                echo "AMI creation state= $temp_ami_state."
                exit 0
            fi
          done
