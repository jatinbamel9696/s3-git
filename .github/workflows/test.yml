name: "Copy ami to us"

on:
  workflow_dispatch:    
  push:
    branches:
      - main       
jobs:
  deploy:
    name: "Test"
    runs-on: ubuntu-latest
    env:	
      AWS_ACCESS_KEY_ID: ${{  secrets.AWS_ACCESS_KEY_ID  }}
      AWS_SECRET_ACCESS_KEY: ${{  secrets.AWS_SECRET_ACCESS_KEY  }}
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID1: ${{  secrets.AWS_ACCESS_KEY_ID1  }}
      AWS_SECRET_ACCESS_KEY1: ${{  secrets.AWS_SECRET_ACCESS_KEY1  }}
      SOURCE_STAGING_BUCKET: "test-ami-jatin"
      DESTINATION_STAGING_BUCKET: "source-bucket-test-jatin"
      DESTINATION_REGION: "us-east-1"
      AWS_DEFAULT_REGION: "us-east-1"
      
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1' 
      
      - name: fetch latest ami id with tag value
        continue-on-error: true
        run: |
          echo "fetching ami id"
          aws ec2 describe-images --region $AWS_DEFAULT_REGION --filters 'Name=tag:Name,Values=test*'  --query "sort_by(Images, &CreationDate)[-1].ImageId" --output text >ami_id
          amiID=$(cat 'ami_id')
          echo $amiID
          echo "amiID=$amiID" >> $GITHUB_ENV         
          
         
      - name: Configure AWS credentials from Test account2
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID1 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY1 }}
          aws-region: 'us-east-1'
          
        
      - name: Create restore AMI task
        continue-on-error: true
        run : |
          echo "Installing jq..."
          sudo apt-get install -y jq
          echo "Create restore ami task"
          restore_ami_task_output=$(aws ec2 create-restore-image-task --object-key ami-05906b1d85ba23270.bin --bucket "source-bucket-test-jatin" --name "Temporary copy of ami-05906b1d85ba23270.bin")
          cn_temp_image_id=$(jq -r '.ImageId' <<< "${restore_ami_task_output}")
          #cn_temp_id=$(echo $restore_ami_task_output|jq -r '.ImageId')
          echo "Wait for the temporary image to become available."
          wait_time=200
          sleep $wait_time
          check_count=1
          temp_ami_ready=false

          while [ $check_count -le 10 ]
          do
            echo "Describe image restore task"
            temp_ami_detail=$(aws ec2 describe-images --region us-east-1 --image-ids $cn_temp_image_id)
            temp_ami_state=$(jq -r '.Images[0].State' <<< "${temp_ami_detail}")
            if [ "$temp_ami_state" == "pending" ]; then
                echo "AMI creation pending, wait for $wait_time seconds..."
                sleep $wait_time
                check_count=$(( $check_count + 1 ))
            elif [ "$temp_ami_state" == "available" ]; then
                temp_ami_ready=true
                break
            else
                echo "AMI creation state: $temp_ami_state."
                exit 1
            fi
          done
