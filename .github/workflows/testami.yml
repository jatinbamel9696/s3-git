name: "Copy ami to another region"

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        type: string
        description: "Default AWS region used to build the AMI"
        required: false
        default: "us-east-1"
      SOURCE_STAGING_BUCKET:
        type: string
        description: "the bucket used to store the ami bakup file."
        required: false
        default: "test-ami-jatin"
      DESTINATION_STAGING_BUCKET:
        type: string
        description: "the bucket used to store the ami bakup file in another region"
        required: false
        default: "source-bucket-test-jatin"  
      DESTINATION_REGION:
        type: string
        description: "region of the destination staging bucket"
        required: false
        default: "us-east-1"

        
jobs:
  deploy:
    name: "Test"
    runs-on: ubuntu-latest
    env:	
      AWS_ACCESS_KEY_ID: ${{  secrets.AWS_ACCESS_KEY_ID  }}
      AWS_SECRET_ACCESS_KEY: ${{  secrets.AWS_SECRET_ACCESS_KEY  }}
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID1: ${{  secrets.AWS_ACCESS_KEY_ID1  }}
      AWS_SECRET_ACCESS_KEY1: ${{  secrets.AWS_SECRET_ACCESS_KEY1  }}
      
      
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1' 
      
      - name: fetch latest ami id with tag value
        run: |
          echo "fetching ami id"
          aws ec2 describe-images --region ${{ inputs.AWS_DEFAULT_REGION }} --filters 'Name=tag:Name,Values=test*'  --query "sort_by(Images, &CreationDate)[-1].ImageId" --output text >ami_id
          amiID=$(cat 'ami_id')
          echo $amiID
          echo "amiID=$amiID" >> $GITHUB_ENV         
          
      - name: ec2 create-store-image-task
        run: |
          echo "Installing jq..."
          sudo apt-get install -y jq
          echo "Backup AMI $amiID to S3"
          backup_ami_task_output=$( aws ec2 create-store-image-task --image-id $amiID --bucket ${{ inputs.SOURCE_STAGING_BUCKET }})
          backup_object=$(jq -r ".ObjectKey <<< "${backup_ami_task_output}")
          echo "backup_object=$backup_object" >> $GITHUB_ENV 
          sleep 30
          wait_time=30
          check_count=1
          while [ $check_count -le 5]
          do 
            backup_ready=$(aws s3api head-object --bucket ${{ inputs.SOURCE_STAGING_BUCKET }} --key $backup_object || true)
            if [ -z "$backup_ready"]; then
              echo "Backup not complete, wait for $wait_time seconds..."
              wait_time=$(( $wait_time * $check_count))
              sleep $wait_time
              check_count=$(( $check_count + 1))
            else
              break
              echo "AMI backed up to object s3://${{ inputs.SOURCE_STAGING_BUCKET }}/$backup_object."
            fi
          done
          echo "describing storage image task"
          aws ec2 describe-store-image-tasks

      - name: Download AMI backup object to workspace
        run: |
          aws s3 cp s3://${{ inputs.SOURCE_STAGING_BUCKET }}/$backup_object ${{ github.workspace }} --region ${{ inputs.AWS_DEFAULT_REGION }} --no-progress
          echo "Delete AMI backup file from S3."
          aws s3 rm s3://${{ inputs.SOURCE_STAGING_BUCKET }}/$backup_object

          
      - name: Configure AWS credentials from Test account2
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID1 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY1 }}
          aws-region: 'us-east-1'
          
      - name: Upload AMI backup file $backup_object to the staging bucket.
        run: |      
          aws s3 cp ${{ github.workspace }}/$backup_object s3://${{ inputs.DESTINATION_STAGING_BUCKET }}/$backup_object --sse --no-progress
          
      - name: Create restore AMI task
        run : |
          restore_ami_task_output=$(aws ec2 create-restore-image-task --object-key $backup_object --bucket ${{ inputs.DESTINATION_STAGING_BUCKET }} --name "Temporary copy of $amiID")
          cn_temporary_image_id=$(jq -r ".ImageID <<< "${restore_ami_task_output}")

          echo "Wait for the temporary image to become available."
          wait_time=300
          sleep $wait_time
          check_count=1
          temporary_ami_ready=false

          while [ $check_count -le 10]
          do 
            temporary_ami_details=$(aws ec2 describe-image --region $ {{ inputs.DESTINATION_REGION }} --image-ids $cn_temporary_image_id)
            temporary_ami_state=$(jq -r ".Images[0].State" <<< "${temporary_ami_detail}")

            if [ "$temporary_ami_state" == "pending"]; then
              echo "AMI creation pending, wait for $wait_time seconds..."
              sleep $wait_time
              check_count =$(( $check_count +1 ))
            elif [ "$temporary_ami_state" == "available" ]; then
              temporary_ami_ready=true
              break

            else
              echo "AMI creation state: $temporary_ami_state"
              exit 1
            fi 
          done  




        
